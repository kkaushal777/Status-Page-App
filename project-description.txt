Build a Simplified Version of a Status Page Application
Objective
 Create a simplified version of a status page application similar to services like StatusPage, Cachet, Betterstack, or Openstatus. The application should allow administrators to manage services and their statuses and provide a public-facing page for users to view the current status of all services.
Project Scope
 The primary goal is to create a working application where anyone can log, view, and manage the status of multiple applications. The application should include a public page where customers and end users can view the status of the application.
Tech Stack
 You are required to use the following technologies:
Frontend: You may choose any front-end framework such as react, or others you are comfortable with.
Backend: Python (Flask)
Database: PostgreSQL with an ORM for database interaction.
Authentication: Implement user and team management using SaaS tools like Auth0 for authentication and multi-tenant organization management.
WebSocket: Implement real-time status updates via WebSocket.
UI: Use ShadcnUI for clean, minimalistic design (mandatory).
Submission Guidelines
Provide a GitHub repository with the complete code.
Include a README with setup instructions and any necessary documentation.
Deploy the application to a free hosting service (e.g., Heroku, Vercel, Replit) for easy review.
Create a short Loom video showing the demo of the app and a quick walkthrough of the codebase.
Share a dummy login for testing the submission.
Key Features
User Authentication: Implement secure login functionality.
Team Management: Allow administrators to manage teams within the application.
Organization (Multi-Tenant): Support multiple organizations, each with its own services, incidents, and users.
Service Management:
CRUD Operations: Allow CRUD operations for services (e.g., "Website", "API", "Database").
Status Updates: Enable the ability to set and update the status of each service (e.g., "Operational", "Degraded Performance", "Partial Outage", "Major Outage").
Incident/Maintenance Management:
Create, update, and resolve incidents or scheduled maintenance.
Associate incidents with specific services.
Add updates to ongoing incidents.
Real-Time Status Updates:
Implement WebSocket connections to push status changes to connected clients in real-time.
Public Status Page:
Display the current status of all services.
Show active incidents and maintenance.
Display a timeline of recent incidents and status changes.
Basic Styling
Clean, minimalistic UI similar to Linear. You can use a framework like ShadcnUI.
Optional Stretch Goals (if time permits)
Implement email notifications for status changes.
Add metric graphs for service uptime percentage.
Create a simple API for external status checks.
Evaluation Criteria
Code Quality: Clean, well-organized, and commented code.
Architecture: Proper separation of concerns and scalable design.
Frontend Skills: Responsive design, state management, and component structure.
Backend Skills: API design, database integration, and authentication implementation.
Problem-Solving: How you approach and solve challenges during development.
AI-First Development: Ability to use AI tools like Cursor, GitHub Copilot, Claude Sonnet, etc., to fast-track development.
We look forward to reviewing your innovative solutions and understanding how you approach and solve real-world problems. 

